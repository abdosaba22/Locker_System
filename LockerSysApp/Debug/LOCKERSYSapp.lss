
LOCKERSYSapp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000da  008000da  000008ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001700  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5e  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee8  00000000  00000000  00002bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00003c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c8a  00000000  00000000  0000413f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3d       	cpi	r26, 0xDA	; 218
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ed       	ldi	r26, 0xDA	; 218
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3d       	cpi	r26, 0xDB	; 219
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 03 	call	0x6ee	; 0x6ee <main>
  8a:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_write>:
* Parameters   : address: address of EEPROM location (0 - 1023)
*                data:to be written
* Return value : void
*************************************************************/
void EEPROM_write(uint16_t address , uint8_t data){
	while(READBIT(EECR,EEWE)); // when bit EEWE=1 don't do anything "stuck" 
  92:	e1 99       	sbic	0x1c, 1	; 28
  94:	fe cf       	rjmp	.-4      	; 0x92 <EEPROM_write>
	EEAR = address; // put our address in address reg
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
	EEDR = data; //put our our in data reg
  9a:	6d bb       	out	0x1d, r22	; 29
	SETBIT(EECR, EEMWE); //enable master bit
  9c:	8c b3       	in	r24, 0x1c	; 28
  9e:	84 60       	ori	r24, 0x04	; 4
  a0:	8c bb       	out	0x1c, r24	; 28
	SETBIT(EECR, EEWE);// start writing
  a2:	8c b3       	in	r24, 0x1c	; 28
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8c bb       	out	0x1c, r24	; 28
  a8:	08 95       	ret

000000aa <EEPROM_read>:
* Parameters   : uint16_t address: address of EEPROM location range
* Return value : uint8_t: return value in our(address) in EEPROM
****************************************************/

uint8_t EEPROM_read(uint16_t address){
	while(READBIT(EECR,EEWE));
  aa:	e1 99       	sbic	0x1c, 1	; 28
  ac:	fe cf       	rjmp	.-4      	; 0xaa <EEPROM_read>
	EEAR = address;
  ae:	9f bb       	out	0x1f, r25	; 31
  b0:	8e bb       	out	0x1e, r24	; 30
	SETBIT(EECR, EERE);
  b2:	8c b3       	in	r24, 0x1c	; 28
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
  b8:	8d b3       	in	r24, 0x1d	; 29

}
  ba:	08 95       	ret

000000bc <save_password>:
* Function Name: save_password
* Purpose      : save pass in EEprom
* Parameters   : correct_pass array of entered pass
* Return value : void
***************************/
void save_password(uint8_t *correct_pass){
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	8c 01       	movw	r16, r24
	for(uint8_t i=0;i<4;i++){
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	0b c0       	rjmp	.+22     	; 0xde <save_password+0x22>
		EEPROM_write(100+i,correct_pass[i]);
  c8:	8c 2f       	mov	r24, r28
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	f8 01       	movw	r30, r16
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	60 81       	ld	r22, Z
  d4:	8c 59       	subi	r24, 0x9C	; 156
  d6:	9f 4f       	sbci	r25, 0xFF	; 255
  d8:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
* Purpose      : save pass in EEprom
* Parameters   : correct_pass array of entered pass
* Return value : void
***************************/
void save_password(uint8_t *correct_pass){
	for(uint8_t i=0;i<4;i++){
  dc:	cf 5f       	subi	r28, 0xFF	; 255
  de:	c4 30       	cpi	r28, 0x04	; 4
  e0:	98 f3       	brcs	.-26     	; 0xc8 <save_password+0xc>
		EEPROM_write(100+i,correct_pass[i]);
	}
}
  e2:	cf 91       	pop	r28
  e4:	1f 91       	pop	r17
  e6:	0f 91       	pop	r16
  e8:	08 95       	ret

000000ea <reset_password>:
* Function Name: reset_password
* Purpose      : make pass 0000
* Parameters   : correct_pass array of saved pass
* Return value : void
***************************/
void reset_password(uint8_t *correct_pass){
  ea:	ac 01       	movw	r20, r24
	for(uint8_t i=0;i<4;i++){
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	06 c0       	rjmp	.+12     	; 0xfc <reset_password+0x12>
		correct_pass[i]='0';
  f0:	fa 01       	movw	r30, r20
  f2:	e9 0f       	add	r30, r25
  f4:	f1 1d       	adc	r31, r1
  f6:	20 e3       	ldi	r18, 0x30	; 48
  f8:	20 83       	st	Z, r18
* Purpose      : make pass 0000
* Parameters   : correct_pass array of saved pass
* Return value : void
***************************/
void reset_password(uint8_t *correct_pass){
	for(uint8_t i=0;i<4;i++){
  fa:	9f 5f       	subi	r25, 0xFF	; 255
  fc:	94 30       	cpi	r25, 0x04	; 4
  fe:	c0 f3       	brcs	.-16     	; 0xf0 <reset_password+0x6>
		correct_pass[i]='0';
	}
	save_password(&correct_pass[0]);
 100:	ca 01       	movw	r24, r20
 102:	0e 94 5e 00 	call	0xbc	; 0xbc <save_password>
	LCD_write_command(0x01);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_command(0x82);
 10c:	82 e8       	ldi	r24, 0x82	; 130
 10e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_string("password_reset");
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	87 ea       	ldi	r24, 0xA7	; 167
 11e:	91 e6       	ldi	r25, 0x61	; 97
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <reset_password+0x36>
 128:	00 c0       	rjmp	.+0      	; 0x12a <reset_password+0x40>
 12a:	00 00       	nop
	_delay_ms(2000);
	LCD_write_command(0x01);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 132:	08 95       	ret

00000134 <change_password>:
* Purpose      : change pass in one condition in EEprom
* Parameters   : correct_pass array of password
*              : check array of entered pass
* Return value : void
***************************/
void change_password(uint8_t *coreect_pass,uint8_t *check){
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	7c 01       	movw	r14, r24
 140:	8b 01       	movw	r16, r22
	LCD_write_command(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_command(0x82);
 148:	82 e8       	ldi	r24, 0x82	; 130
 14a:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_string("set_password");
 14e:	8f e6       	ldi	r24, 0x6F	; 111
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
	LCD_write_command(0xC2);
 156:	82 ec       	ldi	r24, 0xC2	; 194
 158:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>

	for(uint8_t i=0;i<4;i++){
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	13 c0       	rjmp	.+38     	; 0x186 <change_password+0x52>
		while(! KEYPAD_read());
 160:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 164:	88 23       	and	r24, r24
 166:	e1 f3       	breq	.-8      	; 0x160 <change_password+0x2c>
		check[i]=KEYPAD_read();
 168:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 16c:	f8 01       	movw	r30, r16
 16e:	ec 0f       	add	r30, r28
 170:	f1 1d       	adc	r31, r1
 172:	80 83       	st	Z, r24
		LCD_write_char(KEYPAD_read());
 174:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 178:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_write_char>
		while(KEYPAD_read());
 17c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 180:	81 11       	cpse	r24, r1
 182:	fc cf       	rjmp	.-8      	; 0x17c <change_password+0x48>
	LCD_write_command(0x01);
	LCD_write_command(0x82);
	LCD_write_string("set_password");
	LCD_write_command(0xC2);

	for(uint8_t i=0;i<4;i++){
 184:	cf 5f       	subi	r28, 0xFF	; 255
 186:	c4 30       	cpi	r28, 0x04	; 4
 188:	58 f3       	brcs	.-42     	; 0x160 <change_password+0x2c>
		while(! KEYPAD_read());
		check[i]=KEYPAD_read();
		LCD_write_char(KEYPAD_read());
		while(KEYPAD_read());
	}
	while(! KEYPAD_read());
 18a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 18e:	88 23       	and	r24, r24
 190:	e1 f3       	breq	.-8      	; 0x18a <change_password+0x56>
	
	if (KEYPAD_read()=='/')
 192:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 196:	8f 32       	cpi	r24, 0x2F	; 47
 198:	51 f5       	brne	.+84     	; 0x1ee <change_password+0xba>
	{   while(KEYPAD_read());
 19a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 19e:	81 11       	cpse	r24, r1
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <change_password+0x66>
		LCD_write_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
		for(uint8_t i=0;i<4;i++){
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <change_password+0x8e>
			coreect_pass[i]=check[i];
 1ac:	82 2f       	mov	r24, r18
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	f7 01       	movw	r30, r14
 1b2:	e8 0f       	add	r30, r24
 1b4:	f9 1f       	adc	r31, r25
 1b6:	d8 01       	movw	r26, r16
 1b8:	a8 0f       	add	r26, r24
 1ba:	b9 1f       	adc	r27, r25
 1bc:	8c 91       	ld	r24, X
 1be:	80 83       	st	Z, r24
	while(! KEYPAD_read());
	
	if (KEYPAD_read()=='/')
	{   while(KEYPAD_read());
		LCD_write_command(0x01);
		for(uint8_t i=0;i<4;i++){
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	24 30       	cpi	r18, 0x04	; 4
 1c4:	98 f3       	brcs	.-26     	; 0x1ac <change_password+0x78>
			coreect_pass[i]=check[i];
		}
		save_password(&coreect_pass[0]);
 1c6:	c7 01       	movw	r24, r14
 1c8:	0e 94 5e 00 	call	0xbc	; 0xbc <save_password>
		LCD_write_string("password_saved");
 1cc:	8c e7       	ldi	r24, 0x7C	; 124
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	87 ea       	ldi	r24, 0xA7	; 167
 1d8:	91 e6       	ldi	r25, 0x61	; 97
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <change_password+0xa6>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <change_password+0xb0>
 1e4:	00 00       	nop
		_delay_ms(2000);
		LCD_write_command(0x01);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 1ec:	17 c0       	rjmp	.+46     	; 0x21c <change_password+0xe8>
	}
	else{
		LCD_write_command(0x01);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
		LCD_write_string("pass_not_saved");
 1f4:	8b e8       	ldi	r24, 0x8B	; 139
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	87 ea       	ldi	r24, 0xA7	; 167
 200:	91 e6       	ldi	r25, 0x61	; 97
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <change_password+0xce>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <change_password+0xd8>
 20c:	00 00       	nop
		_delay_ms(2000);
		while(KEYPAD_read());
 20e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 212:	81 11       	cpse	r24, r1
 214:	fc cf       	rjmp	.-8      	; 0x20e <change_password+0xda>
		LCD_write_command(0x01);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	}
	
}
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <read_entered_pass>:
* Function Name: read_entered_pass
* Purpose      : put the entered number from user in enterd_password array
* Parameters   : entered_pa array of number from user
* Return value : void
***************************/
void read_entered_pass(uint8_t *entered_pa){
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	8c 01       	movw	r16, r24
	global_digit=0;//set global to initial value
 230:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__data_end>
	LCD_write_command(0xc0); 
 234:	80 ec       	ldi	r24, 0xC0	; 192
 236:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	for (uint8_t i=0;i<10;i++)
 23a:	c0 e0       	ldi	r28, 0x00	; 0
 23c:	3b c0       	rjmp	.+118    	; 0x2b4 <read_entered_pass+0x8c>
	{   while(!KEYPAD_read());
 23e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 242:	88 23       	and	r24, r24
 244:	e1 f3       	breq	.-8      	; 0x23e <read_entered_pass+0x16>
		//entered 4 numbers then = go to compare		   | n.of entered digits 
		if(i==4 && KEYPAD_read()== '='){while(KEYPAD_read());global_digit=4;return;}
 246:	c4 30       	cpi	r28, 0x04	; 4
 248:	61 f4       	brne	.+24     	; 0x262 <read_entered_pass+0x3a>
 24a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 24e:	8d 33       	cpi	r24, 0x3D	; 61
 250:	41 f4       	brne	.+16     	; 0x262 <read_entered_pass+0x3a>
 252:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 256:	81 11       	cpse	r24, r1
 258:	fc cf       	rjmp	.-8      	; 0x252 <read_entered_pass+0x2a>
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
 260:	2e c0       	rjmp	.+92     	; 0x2be <read_entered_pass+0x96>
		// entered pass but not 4 digits to compare with correct_pass or 10 digit zero to reset.
		if(KEYPAD_read()== '='){while(KEYPAD_read()); global_digit=i;break;}
 262:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 266:	8d 33       	cpi	r24, 0x3D	; 61
 268:	29 f4       	brne	.+10     	; 0x274 <read_entered_pass+0x4c>
 26a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 26e:	81 11       	cpse	r24, r1
 270:	fc cf       	rjmp	.-8      	; 0x26a <read_entered_pass+0x42>
 272:	22 c0       	rjmp	.+68     	; 0x2b8 <read_entered_pass+0x90>
		entered_pa[i]=KEYPAD_read();
 274:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 278:	f8 01       	movw	r30, r16
 27a:	ec 0f       	add	r30, r28
 27c:	f1 1d       	adc	r31, r1
 27e:	80 83       	st	Z, r24
		SETBIT(PORTD,0);//buzzer
 280:	82 b3       	in	r24, 0x12	; 18
 282:	81 60       	ori	r24, 0x01	; 1
 284:	82 bb       	out	0x12, r24	; 18
		LCD_write_char('*');
 286:	8a e2       	ldi	r24, 0x2A	; 42
 288:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_write_char>
		LCD_write_command(0x06);
 28c:	86 e0       	ldi	r24, 0x06	; 6
 28e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	94 e0       	ldi	r25, 0x04	; 4
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <read_entered_pass+0x70>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <read_entered_pass+0x7a>
 2a2:	00 00       	nop
		_delay_ms(100);
		CLRBIT(PORTD,0);//buzzer
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	8e 7f       	andi	r24, 0xFE	; 254
 2a8:	82 bb       	out	0x12, r24	; 18
		while(KEYPAD_read());
 2aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 2ae:	81 11       	cpse	r24, r1
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <read_entered_pass+0x82>
* Return value : void
***************************/
void read_entered_pass(uint8_t *entered_pa){
	global_digit=0;//set global to initial value
	LCD_write_command(0xc0); 
	for (uint8_t i=0;i<10;i++)
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
 2b4:	ca 30       	cpi	r28, 0x0A	; 10
 2b6:	18 f2       	brcs	.-122    	; 0x23e <read_entered_pass+0x16>
		_delay_ms(100);
		CLRBIT(PORTD,0);//buzzer
		while(KEYPAD_read());
		
	}
	global_digit=10; // 10 digits entered
 2b8:	8a e0       	ldi	r24, 0x0A	; 10
 2ba:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
		
} 
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	08 95       	ret

000002c6 <wrong_password>:
* Parameters   : void
* Return value : void
***************************/
void wrong_password(void){
	
	LCD_write_command(0x01);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_command(0xc2);
 2cc:	82 ec       	ldi	r24, 0xC2	; 194
 2ce:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_string("try_again");
 2d2:	8a e9       	ldi	r24, 0x9A	; 154
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
	SETBIT(PORTD,0);
 2da:	82 b3       	in	r24, 0x12	; 18
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	82 bb       	out	0x12, r24	; 18
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	8b e7       	ldi	r24, 0x7B	; 123
 2e4:	92 e9       	ldi	r25, 0x92	; 146
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <wrong_password+0x20>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <wrong_password+0x2a>
 2f0:	00 00       	nop
	_delay_ms(3000);
	CLRBIT(PORTD,0);
 2f2:	82 b3       	in	r24, 0x12	; 18
 2f4:	8e 7f       	andi	r24, 0xFE	; 254
 2f6:	82 bb       	out	0x12, r24	; 18
	LCD_write_command(0x01);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 2fe:	08 95       	ret

00000300 <correct_password>:
* Purpose      : print on LCD Locker opened used when entered pass correct 
* Parameters   : void
* Return value : void
***************************/
void correct_password(void){
	LCD_write_command(0x01);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_command(0xc2);
 306:	82 ec       	ldi	r24, 0xC2	; 194
 308:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
	LCD_write_string("Locker_opened");
 30c:	84 ea       	ldi	r24, 0xA4	; 164
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	87 ea       	ldi	r24, 0xA7	; 167
 318:	91 e6       	ldi	r25, 0x61	; 97
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <correct_password+0x1a>
 322:	00 c0       	rjmp	.+0      	; 0x324 <correct_password+0x24>
 324:	00 00       	nop
	_delay_ms(2000);
	LCD_write_command(0x01);
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 32c:	08 95       	ret

0000032e <compare_password>:
* Purpose      : detect if pass is correct or equal to Reset value
* Parameters   : correct_pass array of entered pass
*			   : check array of entered numbers from user
* Return value : uint8_t
***************************/
uint8_t compare_password(uint8_t *correct_pass , uint8_t *check){
 32e:	ac 01       	movw	r20, r24
	switch(global_digit){
 330:	90 91 da 00 	lds	r25, 0x00DA	; 0x8000da <__data_end>
 334:	94 30       	cpi	r25, 0x04	; 4
 336:	a9 f0       	breq	.+42     	; 0x362 <compare_password+0x34>
 338:	9a 30       	cpi	r25, 0x0A	; 10
 33a:	31 f1       	breq	.+76     	; 0x388 <compare_password+0x5a>
 33c:	2d c0       	rjmp	.+90     	; 0x398 <compare_password+0x6a>
		// entered 4 digits start compare with correct_pass
		case 4 :
			for(uint8_t i=0;i<4;i++){
				if(check[i]!=correct_pass[i]){wrong_password();return 0;}
 33e:	29 2f       	mov	r18, r25
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	fb 01       	movw	r30, r22
 344:	e2 0f       	add	r30, r18
 346:	f3 1f       	adc	r31, r19
 348:	e0 81       	ld	r30, Z
 34a:	da 01       	movw	r26, r20
 34c:	a2 0f       	add	r26, r18
 34e:	b3 1f       	adc	r27, r19
 350:	8c 91       	ld	r24, X
 352:	e8 17       	cp	r30, r24
 354:	21 f0       	breq	.+8      	; 0x35e <compare_password+0x30>
 356:	0e 94 63 01 	call	0x2c6	; 0x2c6 <wrong_password>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
***************************/
uint8_t compare_password(uint8_t *correct_pass , uint8_t *check){
	switch(global_digit){
		// entered 4 digits start compare with correct_pass
		case 4 :
			for(uint8_t i=0;i<4;i++){
 35e:	9f 5f       	subi	r25, 0xFF	; 255
 360:	01 c0       	rjmp	.+2      	; 0x364 <compare_password+0x36>
* Parameters   : correct_pass array of entered pass
*			   : check array of entered numbers from user
* Return value : uint8_t
***************************/
uint8_t compare_password(uint8_t *correct_pass , uint8_t *check){
	switch(global_digit){
 362:	90 e0       	ldi	r25, 0x00	; 0
		// entered 4 digits start compare with correct_pass
		case 4 :
			for(uint8_t i=0;i<4;i++){
 364:	94 30       	cpi	r25, 0x04	; 4
 366:	58 f3       	brcs	.-42     	; 0x33e <compare_password+0x10>
				if(check[i]!=correct_pass[i]){wrong_password();return 0;}
			}
			correct_password();
 368:	0e 94 80 01 	call	0x300	; 0x300 <correct_password>
			return 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret
			break;
		// entered 10 digits start compare with 10 zeros to reset pass	
		case 10 :
			for (uint8_t i=0;i<10;i++)
			{
				if (check[i]!='0'){wrong_password();return 0;}
 370:	fb 01       	movw	r30, r22
 372:	e9 0f       	add	r30, r25
 374:	f1 1d       	adc	r31, r1
 376:	20 81       	ld	r18, Z
 378:	20 33       	cpi	r18, 0x30	; 48
 37a:	21 f0       	breq	.+8      	; 0x384 <compare_password+0x56>
 37c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <wrong_password>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	08 95       	ret
			correct_password();
			return 1;
			break;
		// entered 10 digits start compare with 10 zeros to reset pass	
		case 10 :
			for (uint8_t i=0;i<10;i++)
 384:	9f 5f       	subi	r25, 0xFF	; 255
 386:	01 c0       	rjmp	.+2      	; 0x38a <compare_password+0x5c>
* Parameters   : correct_pass array of entered pass
*			   : check array of entered numbers from user
* Return value : uint8_t
***************************/
uint8_t compare_password(uint8_t *correct_pass , uint8_t *check){
	switch(global_digit){
 388:	90 e0       	ldi	r25, 0x00	; 0
			correct_password();
			return 1;
			break;
		// entered 10 digits start compare with 10 zeros to reset pass	
		case 10 :
			for (uint8_t i=0;i<10;i++)
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	88 f3       	brcs	.-30     	; 0x370 <compare_password+0x42>
			{
				if (check[i]!='0'){wrong_password();return 0;}
			}
			reset_password(&correct_pass[0]);
 38e:	ca 01       	movw	r24, r20
 390:	0e 94 75 00 	call	0xea	; 0xea <reset_password>
			return 2;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	08 95       	ret
			break;
		//  different n_of digit, wrong 	
		default:
			wrong_password();
 398:	0e 94 63 01 	call	0x2c6	; 0x2c6 <wrong_password>
			return 0;
 39c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}						
}
 39e:	08 95       	ret

000003a0 <KEYPAD_init>:
	'7','8','9','/',
	'4','5','6','*',
	'1','2','3','-',
	'c','0','=','+'};
void KEYPAD_init(void){
	KEYPAD_PORT_INIT();
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	84 bb       	out	0x14, r24	; 20
 3a4:	80 ef       	ldi	r24, 0xF0	; 240
 3a6:	85 bb       	out	0x15, r24	; 21
 3a8:	08 95       	ret

000003aa <KEYPAD_read>:
}

uint8_t KEYPAD_read(void){
	uint8_t i;
	for(i = 0; i < 4; i++){
 3aa:	e0 e0       	ldi	r30, 0x00	; 0
 3ac:	6e c0       	rjmp	.+220    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		switch(i){
 3ae:	e1 30       	cpi	r30, 0x01	; 1
 3b0:	99 f0       	breq	.+38     	; 0x3d8 <KEYPAD_read+0x2e>
 3b2:	28 f0       	brcs	.+10     	; 0x3be <KEYPAD_read+0x14>
 3b4:	e2 30       	cpi	r30, 0x02	; 2
 3b6:	e9 f0       	breq	.+58     	; 0x3f2 <KEYPAD_read+0x48>
 3b8:	e3 30       	cpi	r30, 0x03	; 3
 3ba:	41 f1       	breq	.+80     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3bc:	33 c0       	rjmp	.+102    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			case 0: KP0(0);KP1(1);KP2(1);KP3(1); break;
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	85 bb       	out	0x15, r24	; 21
 3c4:	85 b3       	in	r24, 0x15	; 21
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	85 bb       	out	0x15, r24	; 21
 3ca:	85 b3       	in	r24, 0x15	; 21
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	85 bb       	out	0x15, r24	; 21
 3d0:	85 b3       	in	r24, 0x15	; 21
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	85 bb       	out	0x15, r24	; 21
 3d6:	26 c0       	rjmp	.+76     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			case 1: KP0(1);KP1(0);KP2(1);KP3(1); break;
 3d8:	85 b3       	in	r24, 0x15	; 21
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	85 bb       	out	0x15, r24	; 21
 3de:	85 b3       	in	r24, 0x15	; 21
 3e0:	8d 7f       	andi	r24, 0xFD	; 253
 3e2:	85 bb       	out	0x15, r24	; 21
 3e4:	85 b3       	in	r24, 0x15	; 21
 3e6:	84 60       	ori	r24, 0x04	; 4
 3e8:	85 bb       	out	0x15, r24	; 21
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	19 c0       	rjmp	.+50     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			case 2: KP0(1);KP1(1);KP2(0);KP3(1); break;
 3f2:	85 b3       	in	r24, 0x15	; 21
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	85 bb       	out	0x15, r24	; 21
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	82 60       	ori	r24, 0x02	; 2
 3fc:	85 bb       	out	0x15, r24	; 21
 3fe:	85 b3       	in	r24, 0x15	; 21
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	85 bb       	out	0x15, r24	; 21
 404:	85 b3       	in	r24, 0x15	; 21
 406:	88 60       	ori	r24, 0x08	; 8
 408:	85 bb       	out	0x15, r24	; 21
 40a:	0c c0       	rjmp	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			case 3: KP0(1);KP1(1);KP2(1);KP3(0); break;
 40c:	85 b3       	in	r24, 0x15	; 21
 40e:	81 60       	ori	r24, 0x01	; 1
 410:	85 bb       	out	0x15, r24	; 21
 412:	85 b3       	in	r24, 0x15	; 21
 414:	82 60       	ori	r24, 0x02	; 2
 416:	85 bb       	out	0x15, r24	; 21
 418:	85 b3       	in	r24, 0x15	; 21
 41a:	84 60       	ori	r24, 0x04	; 4
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	85 b3       	in	r24, 0x15	; 21
 420:	87 7f       	andi	r24, 0xF7	; 247
 422:	85 bb       	out	0x15, r24	; 21
		}
		
		if(KP4 == 0) return keypad_matrix[0 + i*4];
 424:	9c 99       	sbic	0x13, 4	; 19
 426:	09 c0       	rjmp	.+18     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	ee 54       	subi	r30, 0x4E	; 78
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	80 81       	ld	r24, Z
 438:	08 95       	ret
		if(KP5 == 0) return keypad_matrix[1 + i*4];
 43a:	9d 99       	sbic	0x13, 5	; 19
 43c:	09 c0       	rjmp	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	ed 54       	subi	r30, 0x4D	; 77
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	80 81       	ld	r24, Z
 44e:	08 95       	ret
		if(KP6 == 0) return keypad_matrix[2 + i*4];
 450:	9e 99       	sbic	0x13, 6	; 19
 452:	09 c0       	rjmp	.+18     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	ec 54       	subi	r30, 0x4C	; 76
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	80 81       	ld	r24, Z
 464:	08 95       	ret
		if(KP7 == 0) return keypad_matrix[3 + i*4];
 466:	9f 99       	sbic	0x13, 7	; 19
 468:	09 c0       	rjmp	.+18     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	eb 54       	subi	r30, 0x4B	; 75
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	80 81       	ld	r24, Z
 47a:	08 95       	ret
 47c:	8f e9       	ldi	r24, 0x9F	; 159
 47e:	9f e0       	ldi	r25, 0x0F	; 15
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 486:	00 00       	nop
	KEYPAD_PORT_INIT();
}

uint8_t KEYPAD_read(void){
	uint8_t i;
	for(i = 0; i < 4; i++){
 488:	ef 5f       	subi	r30, 0xFF	; 255
 48a:	e4 30       	cpi	r30, 0x04	; 4
 48c:	08 f4       	brcc	.+2      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48e:	8f cf       	rjmp	.-226    	; 0x3ae <KEYPAD_read+0x4>
		if(KP5 == 0) return keypad_matrix[1 + i*4];
		if(KP6 == 0) return keypad_matrix[2 + i*4];
		if(KP7 == 0) return keypad_matrix[3 + i*4];
		_delay_ms(1);
	}
	return 0;
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret

00000494 <LCD_write_command>:
	i--;
	while(i!=-1){
		LCD_write_char(n[i]);
		i--;
	}
}
 494:	9b b3       	in	r25, 0x1b	; 27
 496:	9b 7f       	andi	r25, 0xFB	; 251
 498:	9b bb       	out	0x1b, r25	; 27
 49a:	84 ff       	sbrs	r24, 4
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <LCD_write_command+0x12>
 49e:	9b b3       	in	r25, 0x1b	; 27
 4a0:	90 61       	ori	r25, 0x10	; 16
 4a2:	9b bb       	out	0x1b, r25	; 27
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <LCD_write_command+0x18>
 4a6:	9b b3       	in	r25, 0x1b	; 27
 4a8:	9f 7e       	andi	r25, 0xEF	; 239
 4aa:	9b bb       	out	0x1b, r25	; 27
 4ac:	85 ff       	sbrs	r24, 5
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <LCD_write_command+0x24>
 4b0:	9b b3       	in	r25, 0x1b	; 27
 4b2:	90 62       	ori	r25, 0x20	; 32
 4b4:	9b bb       	out	0x1b, r25	; 27
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <LCD_write_command+0x2a>
 4b8:	9b b3       	in	r25, 0x1b	; 27
 4ba:	9f 7d       	andi	r25, 0xDF	; 223
 4bc:	9b bb       	out	0x1b, r25	; 27
 4be:	86 ff       	sbrs	r24, 6
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <LCD_write_command+0x36>
 4c2:	9b b3       	in	r25, 0x1b	; 27
 4c4:	90 64       	ori	r25, 0x40	; 64
 4c6:	9b bb       	out	0x1b, r25	; 27
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <LCD_write_command+0x3c>
 4ca:	9b b3       	in	r25, 0x1b	; 27
 4cc:	9f 7b       	andi	r25, 0xBF	; 191
 4ce:	9b bb       	out	0x1b, r25	; 27
 4d0:	88 23       	and	r24, r24
 4d2:	24 f4       	brge	.+8      	; 0x4dc <LCD_write_command+0x48>
 4d4:	9b b3       	in	r25, 0x1b	; 27
 4d6:	90 68       	ori	r25, 0x80	; 128
 4d8:	9b bb       	out	0x1b, r25	; 27
 4da:	03 c0       	rjmp	.+6      	; 0x4e2 <LCD_write_command+0x4e>
 4dc:	9b b3       	in	r25, 0x1b	; 27
 4de:	9f 77       	andi	r25, 0x7F	; 127
 4e0:	9b bb       	out	0x1b, r25	; 27
 4e2:	9b b3       	in	r25, 0x1b	; 27
 4e4:	98 60       	ori	r25, 0x08	; 8
 4e6:	9b bb       	out	0x1b, r25	; 27
 4e8:	ef e9       	ldi	r30, 0x9F	; 159
 4ea:	ff e0       	ldi	r31, 0x0F	; 15
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <LCD_write_command+0x58>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <LCD_write_command+0x5e>
 4f2:	00 00       	nop
 4f4:	9b b3       	in	r25, 0x1b	; 27
 4f6:	97 7f       	andi	r25, 0xF7	; 247
 4f8:	9b bb       	out	0x1b, r25	; 27
 4fa:	ef e9       	ldi	r30, 0x9F	; 159
 4fc:	ff e0       	ldi	r31, 0x0F	; 15
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <LCD_write_command+0x6a>
 502:	00 c0       	rjmp	.+0      	; 0x504 <LCD_write_command+0x70>
 504:	00 00       	nop
 506:	80 ff       	sbrs	r24, 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <LCD_write_command+0x7e>
 50a:	9b b3       	in	r25, 0x1b	; 27
 50c:	90 61       	ori	r25, 0x10	; 16
 50e:	9b bb       	out	0x1b, r25	; 27
 510:	03 c0       	rjmp	.+6      	; 0x518 <LCD_write_command+0x84>
 512:	9b b3       	in	r25, 0x1b	; 27
 514:	9f 7e       	andi	r25, 0xEF	; 239
 516:	9b bb       	out	0x1b, r25	; 27
 518:	81 ff       	sbrs	r24, 1
 51a:	04 c0       	rjmp	.+8      	; 0x524 <LCD_write_command+0x90>
 51c:	9b b3       	in	r25, 0x1b	; 27
 51e:	90 62       	ori	r25, 0x20	; 32
 520:	9b bb       	out	0x1b, r25	; 27
 522:	03 c0       	rjmp	.+6      	; 0x52a <LCD_write_command+0x96>
 524:	9b b3       	in	r25, 0x1b	; 27
 526:	9f 7d       	andi	r25, 0xDF	; 223
 528:	9b bb       	out	0x1b, r25	; 27
 52a:	82 ff       	sbrs	r24, 2
 52c:	04 c0       	rjmp	.+8      	; 0x536 <LCD_write_command+0xa2>
 52e:	9b b3       	in	r25, 0x1b	; 27
 530:	90 64       	ori	r25, 0x40	; 64
 532:	9b bb       	out	0x1b, r25	; 27
 534:	03 c0       	rjmp	.+6      	; 0x53c <LCD_write_command+0xa8>
 536:	9b b3       	in	r25, 0x1b	; 27
 538:	9f 7b       	andi	r25, 0xBF	; 191
 53a:	9b bb       	out	0x1b, r25	; 27
 53c:	83 ff       	sbrs	r24, 3
 53e:	04 c0       	rjmp	.+8      	; 0x548 <LCD_write_command+0xb4>
 540:	8b b3       	in	r24, 0x1b	; 27
 542:	80 68       	ori	r24, 0x80	; 128
 544:	8b bb       	out	0x1b, r24	; 27
 546:	03 c0       	rjmp	.+6      	; 0x54e <LCD_write_command+0xba>
 548:	8b b3       	in	r24, 0x1b	; 27
 54a:	8f 77       	andi	r24, 0x7F	; 127
 54c:	8b bb       	out	0x1b, r24	; 27
 54e:	8b b3       	in	r24, 0x1b	; 27
 550:	88 60       	ori	r24, 0x08	; 8
 552:	8b bb       	out	0x1b, r24	; 27
 554:	8f e9       	ldi	r24, 0x9F	; 159
 556:	9f e0       	ldi	r25, 0x0F	; 15
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_write_command+0xc4>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_write_command+0xca>
 55e:	00 00       	nop
 560:	8b b3       	in	r24, 0x1b	; 27
 562:	87 7f       	andi	r24, 0xF7	; 247
 564:	8b bb       	out	0x1b, r24	; 27
 566:	ef e9       	ldi	r30, 0x9F	; 159
 568:	ff e0       	ldi	r31, 0x0F	; 15
 56a:	31 97       	sbiw	r30, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_write_command+0xd6>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_write_command+0xdc>
 570:	00 00       	nop
 572:	08 95       	ret

00000574 <LCD_init>:
 574:	8a b3       	in	r24, 0x1a	; 26
 576:	8c 6f       	ori	r24, 0xFC	; 252
 578:	8a bb       	out	0x1a, r24	; 26
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 580:	8f e7       	ldi	r24, 0x7F	; 127
 582:	9e e3       	ldi	r25, 0x3E	; 62
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_init+0x10>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_init+0x16>
 58a:	00 00       	nop
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 592:	8f e7       	ldi	r24, 0x7F	; 127
 594:	9e e3       	ldi	r25, 0x3E	; 62
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <LCD_init+0x22>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_init+0x28>
 59c:	00 00       	nop
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5a4:	8f e7       	ldi	r24, 0x7F	; 127
 5a6:	9e e3       	ldi	r25, 0x3E	; 62
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <LCD_init+0x34>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <LCD_init+0x3a>
 5ae:	00 00       	nop
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5b6:	88 e2       	ldi	r24, 0x28	; 40
 5b8:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5bc:	88 e0       	ldi	r24, 0x08	; 8
 5be:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5ce:	8c e0       	ldi	r24, 0x0C	; 12
 5d0:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	29 ef       	ldi	r18, 0xF9	; 249
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	20 40       	sbci	r18, 0x00	; 0
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <LCD_init+0x66>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <LCD_init+0x70>
 5e4:	00 00       	nop
 5e6:	08 95       	ret

000005e8 <LCD_write_char>:
 5e8:	9b b3       	in	r25, 0x1b	; 27
 5ea:	94 60       	ori	r25, 0x04	; 4
 5ec:	9b bb       	out	0x1b, r25	; 27
 5ee:	84 ff       	sbrs	r24, 4
 5f0:	04 c0       	rjmp	.+8      	; 0x5fa <LCD_write_char+0x12>
 5f2:	9b b3       	in	r25, 0x1b	; 27
 5f4:	90 61       	ori	r25, 0x10	; 16
 5f6:	9b bb       	out	0x1b, r25	; 27
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <LCD_write_char+0x18>
 5fa:	9b b3       	in	r25, 0x1b	; 27
 5fc:	9f 7e       	andi	r25, 0xEF	; 239
 5fe:	9b bb       	out	0x1b, r25	; 27
 600:	85 ff       	sbrs	r24, 5
 602:	04 c0       	rjmp	.+8      	; 0x60c <LCD_write_char+0x24>
 604:	9b b3       	in	r25, 0x1b	; 27
 606:	90 62       	ori	r25, 0x20	; 32
 608:	9b bb       	out	0x1b, r25	; 27
 60a:	03 c0       	rjmp	.+6      	; 0x612 <LCD_write_char+0x2a>
 60c:	9b b3       	in	r25, 0x1b	; 27
 60e:	9f 7d       	andi	r25, 0xDF	; 223
 610:	9b bb       	out	0x1b, r25	; 27
 612:	86 ff       	sbrs	r24, 6
 614:	04 c0       	rjmp	.+8      	; 0x61e <LCD_write_char+0x36>
 616:	9b b3       	in	r25, 0x1b	; 27
 618:	90 64       	ori	r25, 0x40	; 64
 61a:	9b bb       	out	0x1b, r25	; 27
 61c:	03 c0       	rjmp	.+6      	; 0x624 <LCD_write_char+0x3c>
 61e:	9b b3       	in	r25, 0x1b	; 27
 620:	9f 7b       	andi	r25, 0xBF	; 191
 622:	9b bb       	out	0x1b, r25	; 27
 624:	88 23       	and	r24, r24
 626:	24 f4       	brge	.+8      	; 0x630 <LCD_write_char+0x48>
 628:	9b b3       	in	r25, 0x1b	; 27
 62a:	90 68       	ori	r25, 0x80	; 128
 62c:	9b bb       	out	0x1b, r25	; 27
 62e:	03 c0       	rjmp	.+6      	; 0x636 <LCD_write_char+0x4e>
 630:	9b b3       	in	r25, 0x1b	; 27
 632:	9f 77       	andi	r25, 0x7F	; 127
 634:	9b bb       	out	0x1b, r25	; 27
 636:	9b b3       	in	r25, 0x1b	; 27
 638:	98 60       	ori	r25, 0x08	; 8
 63a:	9b bb       	out	0x1b, r25	; 27
 63c:	ef e9       	ldi	r30, 0x9F	; 159
 63e:	ff e0       	ldi	r31, 0x0F	; 15
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <LCD_write_char+0x58>
 644:	00 c0       	rjmp	.+0      	; 0x646 <LCD_write_char+0x5e>
 646:	00 00       	nop
 648:	9b b3       	in	r25, 0x1b	; 27
 64a:	97 7f       	andi	r25, 0xF7	; 247
 64c:	9b bb       	out	0x1b, r25	; 27
 64e:	ef e9       	ldi	r30, 0x9F	; 159
 650:	ff e0       	ldi	r31, 0x0F	; 15
 652:	31 97       	sbiw	r30, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <LCD_write_char+0x6a>
 656:	00 c0       	rjmp	.+0      	; 0x658 <LCD_write_char+0x70>
 658:	00 00       	nop
 65a:	80 ff       	sbrs	r24, 0
 65c:	04 c0       	rjmp	.+8      	; 0x666 <LCD_write_char+0x7e>
 65e:	9b b3       	in	r25, 0x1b	; 27
 660:	90 61       	ori	r25, 0x10	; 16
 662:	9b bb       	out	0x1b, r25	; 27
 664:	03 c0       	rjmp	.+6      	; 0x66c <LCD_write_char+0x84>
 666:	9b b3       	in	r25, 0x1b	; 27
 668:	9f 7e       	andi	r25, 0xEF	; 239
 66a:	9b bb       	out	0x1b, r25	; 27
 66c:	81 ff       	sbrs	r24, 1
 66e:	04 c0       	rjmp	.+8      	; 0x678 <LCD_write_char+0x90>
 670:	9b b3       	in	r25, 0x1b	; 27
 672:	90 62       	ori	r25, 0x20	; 32
 674:	9b bb       	out	0x1b, r25	; 27
 676:	03 c0       	rjmp	.+6      	; 0x67e <LCD_write_char+0x96>
 678:	9b b3       	in	r25, 0x1b	; 27
 67a:	9f 7d       	andi	r25, 0xDF	; 223
 67c:	9b bb       	out	0x1b, r25	; 27
 67e:	82 ff       	sbrs	r24, 2
 680:	04 c0       	rjmp	.+8      	; 0x68a <LCD_write_char+0xa2>
 682:	9b b3       	in	r25, 0x1b	; 27
 684:	90 64       	ori	r25, 0x40	; 64
 686:	9b bb       	out	0x1b, r25	; 27
 688:	03 c0       	rjmp	.+6      	; 0x690 <LCD_write_char+0xa8>
 68a:	9b b3       	in	r25, 0x1b	; 27
 68c:	9f 7b       	andi	r25, 0xBF	; 191
 68e:	9b bb       	out	0x1b, r25	; 27
 690:	83 ff       	sbrs	r24, 3
 692:	04 c0       	rjmp	.+8      	; 0x69c <LCD_write_char+0xb4>
 694:	8b b3       	in	r24, 0x1b	; 27
 696:	80 68       	ori	r24, 0x80	; 128
 698:	8b bb       	out	0x1b, r24	; 27
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <LCD_write_char+0xba>
 69c:	8b b3       	in	r24, 0x1b	; 27
 69e:	8f 77       	andi	r24, 0x7F	; 127
 6a0:	8b bb       	out	0x1b, r24	; 27
 6a2:	8b b3       	in	r24, 0x1b	; 27
 6a4:	88 60       	ori	r24, 0x08	; 8
 6a6:	8b bb       	out	0x1b, r24	; 27
 6a8:	8f e9       	ldi	r24, 0x9F	; 159
 6aa:	9f e0       	ldi	r25, 0x0F	; 15
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <LCD_write_char+0xc4>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <LCD_write_char+0xca>
 6b2:	00 00       	nop
 6b4:	8b b3       	in	r24, 0x1b	; 27
 6b6:	87 7f       	andi	r24, 0xF7	; 247
 6b8:	8b bb       	out	0x1b, r24	; 27
 6ba:	ef e9       	ldi	r30, 0x9F	; 159
 6bc:	ff e0       	ldi	r31, 0x0F	; 15
 6be:	31 97       	sbiw	r30, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_write_char+0xd6>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_write_char+0xdc>
 6c4:	00 00       	nop
 6c6:	08 95       	ret

000006c8 <LCD_write_string>:
* Purpose      : display a specific string on LCD
* Parameters   : uint8_t*: array of string which must end with null
* Return value : void
*****************************************************************************/

void LCD_write_string(uint8_t *str){
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	8c 01       	movw	r16, r24
	uint8_t i =0;
 6d0:	c0 e0       	ldi	r28, 0x00	; 0
	for(;str[i]!='\0';i++){
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <LCD_write_string+0x12>
		LCD_write_char(str[i]);
 6d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_write_char>
* Return value : void
*****************************************************************************/

void LCD_write_string(uint8_t *str){
	uint8_t i =0;
	for(;str[i]!='\0';i++){
 6d8:	cf 5f       	subi	r28, 0xFF	; 255
 6da:	f8 01       	movw	r30, r16
 6dc:	ec 0f       	add	r30, r28
 6de:	f1 1d       	adc	r31, r1
 6e0:	80 81       	ld	r24, Z
 6e2:	81 11       	cpse	r24, r1
 6e4:	f7 cf       	rjmp	.-18     	; 0x6d4 <LCD_write_string+0xc>
		LCD_write_char(str[i]);
	}
}
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	08 95       	ret

000006ee <main>:
#include "KEYPAD.h"
#include "PASSWORD.h"


int main(void)
{
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	2e 97       	sbiw	r28, 0x0e	; 14
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	SETBIT(DDRD,0);// pin for buzzer
 702:	81 b3       	in	r24, 0x11	; 17
 704:	81 60       	ori	r24, 0x01	; 1
 706:	81 bb       	out	0x11, r24	; 17
	KEYPAD_init();
 708:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <KEYPAD_init>
	LCD_init();
 70c:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_init>
	
	uint8_t password_saved[4],Entered_pass[10];
	for(uint8_t i=0;i<4;i++)
 710:	10 e0       	ldi	r17, 0x00	; 0
 712:	0f c0       	rjmp	.+30     	; 0x732 <main+0x44>
	{
		password_saved[i]=EEPROM_read(100+i);
 714:	e1 2e       	mov	r14, r17
 716:	f1 2c       	mov	r15, r1
 718:	c7 01       	movw	r24, r14
 71a:	8c 59       	subi	r24, 0x9C	; 156
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	0e 94 55 00 	call	0xaa	; 0xaa <EEPROM_read>
 722:	e1 e0       	ldi	r30, 0x01	; 1
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ec 0f       	add	r30, r28
 728:	fd 1f       	adc	r31, r29
 72a:	ee 0d       	add	r30, r14
 72c:	ff 1d       	adc	r31, r15
 72e:	80 83       	st	Z, r24
	SETBIT(DDRD,0);// pin for buzzer
	KEYPAD_init();
	LCD_init();
	
	uint8_t password_saved[4],Entered_pass[10];
	for(uint8_t i=0;i<4;i++)
 730:	1f 5f       	subi	r17, 0xFF	; 255
 732:	14 30       	cpi	r17, 0x04	; 4
 734:	78 f3       	brcs	.-34     	; 0x714 <main+0x26>
		//if (password_saved[i]==255){password_saved[i]='0';}
	}
	
	while (1) 
    {	
		LCD_write_command(0x80);
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
		LCD_write_string("Enter_Password:");
 73c:	82 ec       	ldi	r24, 0xC2	; 194
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
		LCD_write_command(0xC2);
 744:	82 ec       	ldi	r24, 0xC2	; 194
 746:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
		while(! KEYPAD_read());
 74a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 74e:	88 23       	and	r24, r24
 750:	e1 f3       	breq	.-8      	; 0x74a <main+0x5c>
		read_entered_pass(&Entered_pass[0]);			
 752:	ce 01       	movw	r24, r28
 754:	05 96       	adiw	r24, 0x05	; 5
 756:	0e 94 14 01 	call	0x228	; 0x228 <read_entered_pass>
		
		if(compare_password(&password_saved[0],&Entered_pass[0])==1)
 75a:	be 01       	movw	r22, r28
 75c:	6b 5f       	subi	r22, 0xFB	; 251
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	ce 01       	movw	r24, r28
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	0e 94 97 01 	call	0x32e	; 0x32e <compare_password>
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	29 f7       	brne	.-54     	; 0x736 <main+0x48>
		{	
			while(! KEYPAD_read());
 76c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 770:	88 23       	and	r24, r24
 772:	e1 f3       	breq	.-8      	; 0x76c <main+0x7e>
			if (KEYPAD_read()=='/')
 774:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 778:	8f 32       	cpi	r24, 0x2F	; 47
 77a:	59 f4       	brne	.+22     	; 0x792 <main+0xa4>
			{
				while(KEYPAD_read());
 77c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 780:	81 11       	cpse	r24, r1
 782:	fc cf       	rjmp	.-8      	; 0x77c <main+0x8e>
				change_password(&password_saved[0],&Entered_pass[0]);
 784:	be 01       	movw	r22, r28
 786:	6b 5f       	subi	r22, 0xFB	; 251
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	0e 94 9a 00 	call	0x134	; 0x134 <change_password>
			}
			while(! KEYPAD_read());
 792:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 796:	88 23       	and	r24, r24
 798:	e1 f3       	breq	.-8      	; 0x792 <main+0xa4>
			// LOCK the system
			if(KEYPAD_read()=='*'){
 79a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 79e:	8a 32       	cpi	r24, 0x2A	; 42
 7a0:	51 f6       	brne	.-108    	; 0x736 <main+0x48>
				while(KEYPAD_read());
 7a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KEYPAD_read>
 7a6:	81 11       	cpse	r24, r1
 7a8:	fc cf       	rjmp	.-8      	; 0x7a2 <main+0xb4>
				LCD_write_command(0x01);//clear display
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
				LCD_write_command(0xC2);
 7b0:	82 ec       	ldi	r24, 0xC2	; 194
 7b2:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
				LCD_write_string("closed");
 7b6:	82 ed       	ldi	r24, 0xD2	; 210
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_write_string>
 7be:	2f ef       	ldi	r18, 0xFF	; 255
 7c0:	89 e6       	ldi	r24, 0x69	; 105
 7c2:	98 e1       	ldi	r25, 0x18	; 24
 7c4:	21 50       	subi	r18, 0x01	; 1
 7c6:	80 40       	sbci	r24, 0x00	; 0
 7c8:	90 40       	sbci	r25, 0x00	; 0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <main+0xd6>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <main+0xe0>
 7ce:	00 00       	nop
				_delay_ms(500);
				LCD_write_command(0x01);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_write_command>
 7d6:	af cf       	rjmp	.-162    	; 0x736 <main+0x48>

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
